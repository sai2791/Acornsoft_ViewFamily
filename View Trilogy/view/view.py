from commands import *
import acorn

load(0x8000, "view-part.rom", "65c02")

acorn.bbc()
acorn.is_sideways_rom()
config.set_show_stats(True)
config.set_show_autogenerated_labels(False)
config.set_label_references(True)
config.set_include_assertions(False)
config.set_hex_dump(True)


def inline_string_hook(target, addr):
    n = stringhiz(addr + 3)
    b = get_u8_binary(n)
    if b == 0:
        return n + 1
    return None


def decode_parser_table(addr):
    saddr = addr
    name = ""
    index = 0
    while True:
        b = get_u8_binary(addr)
        if b == 0:
            break
        if b >= 0x80:
            comment(saddr, f"'{name}' -> {index}, flag={b & 0x7f}")
            byte(saddr, len(name))

            name = ""
            saddr = addr + 1
            index += 1
        else:
            name += chr((b ^ ord("[")) & 0xDF)
        addr += 1


def labelword(addr, name):
    word(addr, 2)
    label(addr, name)
    expr_label(addr + 0, f"{name}+0")
    expr_label(addr + 1, f"{name}+1")


def absaddr8(addr):
    addr = memorymanager.BinaryAddr(addr)
    val = memory_binary[addr]
    runtime_addr = movemanager.b2r(addr)
    auto_expr(runtime_addr, str(val))


def immaddr8(addr):
    addr = memorymanager.BinaryAddr(addr)
    label = get_label(
        memory_binary[addr],
        addr,
        binary_addr_type=BinaryAddrType.BINARY_ADDR_IS_AT_LABEL_USAGE,
    )
    runtime_addr = movemanager.b2r(addr)
    auto_expr(runtime_addr, label)


def immaddr(addr_lo, addr_hi):
    addr_lo = memorymanager.BinaryAddr(addr_lo)
    addr_hi = memorymanager.BinaryAddr(addr_hi)
    label = get_label(
        (memory_binary[addr_hi] << 8) | memory_binary[addr_lo],
        addr_lo,
        binary_addr_type=BinaryAddrType.BINARY_ADDR_IS_AT_LABEL_USAGE,
    )
    lo_runtime_addr = movemanager.b2r(addr_lo)
    hi_runtime_addr = movemanager.b2r(addr_hi)
    auto_expr(lo_runtime_addr, make_lo(label))
    auto_expr(hi_runtime_addr, make_hi(label))

label(0x8054, "exit_from_service_call")
label(0x8045, "start_as_language")
label(0x805a, "word_command_str")
subroutine(0x8031, "check_for_command", "Check for Command loop", "Check the command line against the rom_command (WORD)", None, None, False, None, False)
comment(0x803a, "Convert to Upper case", align=Align.INLINE)
wordentry(0xbff7,4)
expr_label(0xbff7, "start_of_switching_area")
label(0x8067, "install_brk_handler")

string(0x899f)
entry(0x89a8)
entry(0x8e71)
entry(0x8e72)
entry(0x8ccf)
entry(0x8cd8)
entry(0x8cfc)
entry(0x8d33)
entry(0x8d4e)
string(0x925c)
entry(0x9262)
entry(0x9716)
entry(0x976c)
string(0x80ea)
entry(0x80f9)
string(0x8100)
entry(0x8105)
string(0x8108)
entry(0x811f)
entry(0x813a)
entry(0x8155)
string(0x8131)
entry(0x829b)
string(0x829e)
string(0x82b1)
entry(0x82ae)
entry(0x82c1)
entry(0x82c4)
entry(0x82d1)
entry(0x83db)
entry(0x83e3)

entry(0x83f4)
entry(0x8462)
entry(0x849f)
entry(0x84d1)
string(0x84f9)
string(0x853b)
entry(0x850c)
entry(0x89b1)
entry(0x856a)
entry(0x85ac)
entry(0x85f3)
entry(0x8638)
label(0x8646, "Error_Frump")
string(0x8646)
entry(0x8652)
entry(0x866e)
string(0x86e9)
entry(0x8774)
entry(0x877f)
entry(0x8791)
string(0x8782)
entry(0x882b)
entry(0x889a)
entry(0x88ba)
entry(0x89b2)
entry(0x89e2)
entry(0x9d0c)
entry(0x9d13)
entry(0x9d2c)
entry(0x9d69)
entry(0x9de8)
entry(0x9e08)
entry(0x9e51)
entry(0x9e3e)
entry(0x9d2e)
entry(0x9e59)
entry(0x9e95)
entry(0x9ea0)
entry(0x9ef3)
entry(0x9f38)
entry(0x9f1a)
entry(0x9f55)
entry(0x9f63)
entry(0x9fca)
entry(0x9fdc)
entry(0x9ff4)
entry(0xa016)
entry(0xa054)
entry(0xa093)
entry(0xa653)
label(0xa7f5, "view_string_and_version")
comment(0xa80d, "Convert to Upper case", align=Align.INLINE)
subroutine(0xa848, "set_carry_and_return")
entry(0xacc6)
entry(0xacd0)
labelword(0x500, "input_buffer")
entry(0xb362)
label(0xbffc, "Swap_to_rom_image_0") 
labelword(0x0f, "himem")
comment(0xaf3e, "65Tube, y=3?", align=Align.INLINE)
label(0xae8c, "clear_carry_and_return")
labelword(0x00, "ptr1")
labelword(0x02, "current_edit_line_ptr")
labelword(0x04, "current_format_line_ptr")
labelword(0x06, "current_ruler_ptr")
labelword(0x08, "current_line_ptr")
subroutine(0x8021, "local_service_handler")
string(0x80c6)
entry(0x80d2)
subroutine(0xaf77, "compute_bytes_free")
subroutine(0xabba, "render_number_to_screen")
subroutine(0xa672, "render_number_to_callback")


label(0xb0fd, "decimal_table")
expr_label(0xb0fe, "decimal_table+1")
word(0xb0fd, 4)

label(0xb105, "non_function_key_table")
word(0xb10a, 4)
expr_label(0xb10a, "jumptable_ptr")
expr_label(0xb292, "jumptable_2_format")
wordentry(0xb292, 23)
subroutine(0x94df, "expand_line")
label(0x3e, "ruler_right_stop")
label(0x0654, "output_buffer")
subroutine(0xa5b8, "check_for_highlight_code", "check for highlight code", "checks if the current character is the highlight1 or highlight2 code. If highlight1 carry is left alone, if highlight2 clear the carry flag", None , None, False, None, False)
subroutine(0x948d, "ce_fmt_cmd")
subroutine(0x94ac, "rj_fmt_cmd")
subroutine(0x97d9, "get_current_fmt_cmd_byte")
subroutine(0x9525, "df_fmt_cmd")
subroutine(0xa7b2, "print_inline_string", "prints the string after this call. Jumps to continue_after-<NAME>", "This function prints the string immediately after the jsr instruction but pulling the return address from the stack and incrementing by 1. the address is stored in tmp2/tmp3. Once the string is printed the tmp2/tmp3 pointer is correct for the next instruction.  strings ending in &00 increment the pointer before returning. strings ending in &ff do not increment the pointer before returning.", None, {}, False, None, False)
subroutine(0x8198, "cli_loop")
label(0x0a, "zp_initalisation_canary")
labelword(0x0b, "page")
labelword(0x0d, "top")
labelword(0x0f, "himem")
comment(0x8027, "Seems to be the last service call", align=Align.INLINE)
word(0x8093)
comment(0x806d, "brk_handler_ptr+1", align=Align.INLINE)
expr_label(0x8093, "brk_handler_ptr")
subroutine(0x89e2, "brk_handler")
subroutine(0xb2eb, "create_go_command")
subroutine(0xaf69, "detect_tube")
subroutine(0xb2d3, "write_hex_to_output_buffer")
label(0xb35d, "star_go_command")
label(0xb362, "relocation_table")
byte(0xb362,8)
label(0x8e, "tmp9")
label(0x86, "tmp1")
label(0x8d, "tmp8")
label(0x85, "tmp0")
immaddr(0xb313, 0xb315)
label(0x89, "tmp4")
label(0x8a, "tmp5")
immaddr(0xb31b, 0xb31f)
label(0x8b, "tmp6")
label(0x8c, "tmp7")
immaddr(0xb32f, 0xb329)
subroutine(0xb2c0, "get_next_bit_of_relocation_table")
label(0xb263, "commands_table")
subroutine(0x9621, "dm_fmt_cmd")
subroutine(0x956e, "em_fmt_cmd")
subroutine(0x95d7, "pe_fmt_cmd")
subroutine(0x95a7, "tm_fmt_cmd")
subroutine(0x95af, "bm_fmt_cmd")
subroutine(0x9590, "pl_fmt_cmd")
subroutine(0x9598, "ts_fmt_cmd")
subroutine(0x9603, "fo_fmt_cmd")
subroutine(0x960d, "he_fmt_cmd")
subroutine(0x96b6, "ht_fmt_cmd")
subroutine(0x95b7, "hm_fmt_cmd")
subroutine(0x95bf, "fm_fmt_cmd")
subroutine(0x95c7, "lm_fmt_cmd")
subroutine(0x95cf, "ls_fmt_cmd")
subroutine(0x95e8, "op_fmt_cmd")
subroutine(0x95f0, "ep_fmt_cmd")
subroutine(0x9484, "lj_fmt_cmd")
subroutine(0x9617, "pb_fmt_cmd")

for addr in range(0xb263, 0xb291,2):
    string(addr,2)
immaddr(0x9520, 0x9522)
subroutine(0x951f, "dh_fmt_cmd")
subroutine(0xb0bd, "reset_register_value_array")
label(0x0798, "register_value_array")
labelword(0x06d8, "header_text_maybe")
labelword(0x071a, "footer_text_maybe")
label(0x2e, "two_sided_flag")
label(0x2f, "left_margin")
label(0x27, "line_spacing")
label(0x2c, "rhs_extra_margin")
label(0x2d, "marco_executing_flag")
label(0x26, "page_length")
comment(0xb0d7, "default to 66 lines", align=Align.INLINE)
label(0x28, "footers_enabled_flag")
label(0x29, "headers_enabled_flag")
label(0x38, "page_break_flag")
label(0x7b6, "register_value_p")
label(0x7ae, "register_value_l")
label(0x22, "top_margin")
label(0x23, "bottom_margin")
label(0x24, "header_margin")
label(0x25, "footer_margin")
label(0x2a, "highlight1_code")
label(0x2b, "highlight2_code")
label(0x7d, "cursor_moved_flag")

subroutine(0x9d2c, "f14_down_key")
subroutine(0x9cf4, "sf1_swap_case_key")
subroutine(0x9d13, "f15_up_key")
subroutine(0x9d0c, "f12_left_key")
subroutine(0x9d03, "f13_right_key")
subroutine(0x9d33, "return_key")

subroutine(0x9b88, "enter_printable_character")
subroutine(0x9aea, "editor_loop")

wordentry(0xb112,52)
expr_label(0xb112, "jumptable_0_editor")
wordentry(0xb17a, 26)
expr_label(0xb17a, "jumptable_4_cli")
wordentry(0xb1ae, 3)
expr_label(0xb1ae, "jumptable_6_errorhandling")
label(0xb1c0, "parser_table")
decode_parser_table(0xb1c0)

string(0x881c)
subroutine(0x880c, "open_file")
subroutine(0x8816, "error_file_not_found")
subroutine(0x882b, "load_cmd")
subroutine(0x83ff, "stop_printing")
string(0x8e1f)
subroutine(0x8e17, "error_if_cassette_filesystem")
subroutine(0x8dfd, "check_not_continuous_editing")
label(0x3c, "file_edit_flags")
subroutine(0x8e08, "check_continuous_editing")
subroutine(0x8999, "display_document_file_state")
labelword(0x1f, "oshwm")
label(0x545, "current_line_buffer")
label(0x5ce, "document_initialisation_canary")
label(0x5cf, "current_ruler_buffer")
label(0x75c, "filename_buffer")
label(0x770, "output_filename")
label(0x784, "printer_driver_name")
label(0x7cc, "line_lengths")
label(0x7ec, "input_filename")
label(0xdf0, "rom_workspace_array")
string(0x89c2)
entry(0x89ae)
string(0x89d8)
entry(0x89e1)
subroutine(0x8d43, "close_file")
label(0x4d, "rw_file_handle")
subroutine(0x8d4e, "compute_required_space_for_insertion")
subroutine(0x8d56, "tmp_store_bytes_free")
subroutine(0x8da8, "parse_optional_filename_from_command")
subroutine(0x84f3, "error_not_enough_memory")
subroutine(0x850c, "read_cmd")
subroutine(0xab83, "move_cursor_to_address")
subroutine(0x8dc3, "bad_filename_error")
subroutine(0x8dd3, "parse_filename_from_command")
subroutine(0x8dd9, "add_CR_to_filename")
subroutine(0x8e11, "document_state_changed")
subroutine(0x8e3a, "check_for_bad_document")
subroutine(0x8e62, "display_NL_then_no_text")
string(0x8e68)
subroutine(0x8e65, "display_no_text")
subroutine(0x8e72, "print_document")
subroutine(0x84e9, "check_for_at_least_150_bytes_free")
labelword(0x15, "ptr5")
labelword(0x19, "first_macro_ptr")
labelword(0x1b, "last_macro_ptr")
label(0x78, "print_xpos")
label(0x32, "printing_from_file_flag")
immaddr(0x8ea3, 0x8ea7)
subroutine(0xab5a, "find_margins_of_current_ruler")
labelword(0x13, "ptr6")
subroutine(0xa726, "acknowledge_escape")
label(0xff, "escape_flag")
labelword(0x7f, "input_buffer_ptr")
subroutine(0xaf27, "deref_and_check_for_command_prefix")
subroutine(0x96e4, "lookup_formatting_command")
subroutine(0x9709, "execute_formatting_command")
subroutine(0x8c1f, "is_uppercase")
subroutine(0xad21, "get_register_address")
immaddr(0xad2d, 0xad31)
subroutine(0xad39, "render_register")
subroutine(0xad5f, "render_date_time_to_output_buffer")
subroutine(0xa644, "render_number_to_output_buffer")
label(0x40, "xpos")
subroutine(0xaaa9, "get_line_length")
subroutine(0xaca0, "beep")
labelword(0x53, "marker_array")
label(0x3f, "ruler_left_stop")
label(0x4f, "format_mode_flag")
subroutine(0xaea8, "exit_sub_cae95")
subroutine(0xadbb, "sound_beep")
comment(0xadbe, "Checks for space before inserting into input buffer", align=Align.BEFORE_LINE)
subroutine(0xa563, "draw_char")
subroutine(0xaeeb, "draw_previous_word")
label(0x75, "flags_need_redrawing_flag")
subroutine(0xaf29, "check_for_command_prefix")
subroutine(0xaf31, "system_init")
label(0x52, "is_tube_flag")
label(0x36, "screen_width")
label(0x35, "screen_height")
subroutine(0xaf83, "initalise_document_if_document_bad")
subroutine(0xaf88, "initalise_document")
subroutine(0xaf95, "perform_initialisation")
label(0x50, "justifying_flag")
label(0x51, "insert_mode_flag")
label(0x69, "print_flags")
immaddr(0xafe2, 0xafed)
immaddr(0xaff7, 0xaff9)
subroutine(0xb099, "create_default_ruler")
immaddr(0xb005, 0xb00a)
label(0x5cc, "end_of_current_line_buffer")
subroutine(0xb033, "move_cursor_to_top_of_document")
subroutine(0xb04a, "clear_cmd")
subroutine(0xb054, "enter_editor_mode")
label(0x6e, "line_buffer_needs_unpacking_flag")
subroutine(0xa73a, "clear_screen")
subroutine(0xb0b8, "end_of_ruler_marker")
immaddr(0x880f, 0x880d)
subroutine(0x889a, "name_cmd")
subroutine(0x88a8, "reset_document_name_after_load")
subroutine(0x88ac, "set_document_name_to_filename_buffer")
subroutine(0x88ba, "save_cmd")
subroutine(0x88d3, "build_save_osfind_block")
subroutine(0x8900, "do_osfile_with_filename")
subroutine(0x890a, "do_osfile_with_block")
immaddr(0x8901, 0x8906)
subroutine(0x8911, "sanitise_area")
labelword(0x5f, "area_start_ptr")
labelword(0x61, "area_end_ptr")
subroutine(0x892b, "calc_bytes_in_area")
subroutine(0x893d, "parse_marks_from_command")
subroutine(0xacb5, "reset_area_to_entire_document")
subroutine(0x8953, "parse_mark_from_command")
subroutine(0xaca7, "lookup_marker")
subroutine(0x8967, "error_bad_marker")
subroutine(0x8975, "error_marker_not_set")
subroutine(0xa968, "adjust_pointers")
entry(0x89c7)
label(0x4e, "error_handling_mode")
subroutine(0x8c13)
label(0x7c, "folding_flag")
subroutine(0x8c17, "to_uppercase")
subroutine(0x8c2e, "set_carry_and_return_2")
string(0x8978)
subroutine(0xa9cd, "make_space_for_insertion")
subroutine(0x8c41, "read_block_from_file")
subroutine(0x8564, "close_rw_and_return_to_cli")
subroutine(0x856a, "mode_cmd")
subroutine(0x8593, "change_mode")
subroutine(0x85a0, "error_bad_mode")
subroutine(0x85ac, "microspace_cmd")
subroutine(0x943f, "prepare_print_driver")
subroutine(0x9457, "call_print_driver")
label(0x6c, "microspacing_flag")
subroutine(0x87ed, "parse_integer_from_command")
subroutine(0x85cb, "error_microspacing")
subroutine(0x85f3, "setup_cmd")
subroutine(0x8611, "error_bad_flag")
subroutine(0x8631, "display_format_flags")
string(0x8631)
subroutine(0x8638, "field_cmd")
subroutine(0x8643, "error_frump")
label(0x7b, "current_tab_key")
subroutine(0x8652, "count_cmd")
entry(0x866c)
entry(0x8702)
subroutine(0x8702, "format_cmd")
subroutine(0xaac7, "wipe_buffer")
subroutine(0x874b, "new_cmd")
subroutine(0x8751, "fold_cmd")
subroutine(0x8768, "display_folding")
string(0x876b)
subroutine(0x8774, "error_off")
subroutine(0x877f, "error_on")
subroutine(0x8791, "printer_cmd")
subroutine(0x8785, "error_bad_file")
subroutine(0x8e31, "test_for_casette_filesystem")
immaddr(0x87b6, 0x87bb)
label(0x400, "print_driver_block")
subroutine(0x87b5, "load_print_driver")
subroutine(0x87fd, "read_file")
immaddr(0x87ee, 0x87f2)
subroutine(0x8863, "build_load_osfile_block")
entry(0x8228)
entry(0x823a)
subroutine(0x829b, "error_no_target_given")
entry(0x8255)
subroutine(0x8288, "error_string_changed")
string(0x8288)
subroutine(0x82ae, "error_no_string_found")
subroutine(0xa5f8, "display_status_word")
subroutine(0xa637, "home_cursor")
subroutine(0xa609, "show_format_flag")
subroutine(0xa61e, "show_justify_flag")
subroutine(0xa62a, "show_insert_mode_flag")
subroutine(0xa63c, "store_line_length")
subroutine(0xa712, "flush_and_read_char")
subroutine(0xa719, "read_char")
subroutine(0xa73e, "cursor_off")
subroutine(0xa751, "setup_CRTC_10_write")
subroutine(0xa760, "draw_prompt_characters")
subroutine(0xa794, "save_cursor_position", "save current cursor position","Saves the current cursor position in tmp4/tmp5", {'x' : "horizontal text position", 'y' : "vertical text position"}, {'x' : "preserved", 'y' : "preserved"}, False, None, False)
subroutine(0xa52f, "set_inverted_text_if_not_mode_7")
label(0x87, "tmp2")
label(0x88, "tmp3")
subroutine(0xa785, "cursor_on")
subroutine(0xa51d, "set_normal_text_if_not_mode_7")
subroutine(0xa79e, "retore_cursor_position", "restore cursor position", "Restores a previously stored cursor position from tmp4/tmp5", None, {'a' : "preserved", 'x' : "horizonal position", 'y' : "Vertical position"}, False, None, False)
subroutine(0xa7a2, "move_cursor", "move cursor", "Moves the cursor to the position in x and y register", {'x' : "horizontal position", 'y' : "vertical position"}, {'a' : "Preserved"}, False, None)
subroutine(0xa7cd, "increment_tmp2_tmp3_pointer_by_character_count")
subroutine(0xa7dc, "string_ends_in_ff", "string was error message", "string was from an error, print a new line and jump back to the cli_loop")
subroutine(0xa7d7, "dont_need_to_increment_msb")
subroutine(0xa7ea, "print_view_string_and_or_version")
subroutine(0xa7e2, "print_view_or_version", "Prints 'VIEW' or 'VIEW M3.0'", "Prints either 'VIEW' or 'VIEW M3.0' based on the value of the x register" , {'x' : "0 means name only. 1 means name and version"}, None, False, None, False)
comment(0xa7f2, "If x was 1 then with print name and version", align=Align.INLINE)
subroutine(0x80fd, "display_not")
subroutine(0x80e7, "display_input_file_is")
subroutine(0x8105, "display_empty")
subroutine(0x810f, "display_screen_mode")
subroutine(0x812e, "display_printer")
subroutine(0x814d, "display_m")
string(0x8150)
subroutine(0x8165, "display_markers_set")
string(0x8168)
entry(0x817f)
entry(0x81a4)
string(0x81a9)
subroutine(0x81a6, "display_prompt")
immaddr(0x81ad, 0x81b1)
entry(0x8177)
subroutine(0x81e3, "input_line_not_escaped")
subroutine(0x9ae7, "run_editor")
subroutine(0x81dd, "esc_key")
subroutine(0x8098, "run_cli")
subroutine(0x81fa, "input_line_not_oscli")
subroutine(0x8205, "error_mistake")
subroutine(0xa7ff, "parse_command")
subroutine(0xa84a, "call_through_jumptable")
labelword(0x4b, "ptr2")
labelword(0x65, "doc_ptr2")
subroutine(0x8354, "expand_escaped_string")
labelword(0x8393, "escaped_char_table")
subroutine(0x8c13, "check_folding_flag")
subroutine(0x83db, "screen_cmd")
subroutine(0x83f9, "print_to_screen")
subroutine(0x83e3, "sheets_cmd")
subroutine(0x83f4, "print_cmd")
subroutine(0x8412, "start_printing")
entry(0x841c)
subroutine(0x841c, "edit_cmd")
label(0x41, "input_file_empty_flag")
label(0x6b, "edit_output_file_handle")
subroutine(0x8cd8, "read_first_chunk_from_input_fh")
subroutine(0x845c, "close_all_files")
subroutine(0x84c1, "close_input_output_files")
subroutine(0x8462, "more_cmd")
subroutine(0x8cfc, "write_area_to_output_fh")
subroutine(0x9e4a, "f4_beginning_of_line_key")
subroutine(0xa054, "f2_bottom_of_text_key")
subroutine(0x8cdc, "read_next_chunk_from_input_fh")
subroutine(0x849f, "finish_cmd")
subroutine(0x84d1, "write_cmd")
subroutine(0x8d05, "write_area_to_rw_fh")
subroutine(0x8538, "display_not_all_read_in")
subroutine(0x8d39, "close_file_indirect")
subroutine(0x8635, "misc_table")
immaddr(0x8757, 0x8759)
subroutine(0x80c1, "display_bytes_free")
immaddr8(0x84c8)
immaddr8(0x84cd)
subroutine(0x80d2, "continue_after_display_bytes_free")
subroutine(0x89a8, "contine_after_display_document_file_state")
subroutine(0x89bf, "display_to")
subroutine(0x89c7, "continue_after_display_to", None, "Return execution to here after printing out ' to ' when using EDIT <file1> <file2>. Prints the <file2> name to screen")
subroutine(0x89d5, "display_no_file")
entry(0x89e0)
comment(0x89e1, "continue after_display_no_file")
comment(0xa7c9, "error message so print new line and return to cli", align=Align.INLINE)
label(0xb1b4, "Mark_Colton")
subroutine(0x8228, "daytona_cmd")
label(0xb108, "jumptable_ptr+1")
subroutine(0x9db8, "delete_key")
subroutine(0x9de8, "tab_key")
subroutine(0xa016, "f1_top_of_text_key")
subroutine(0x9ef3, "cf8_mark_as_ruler_key")
subroutine(0x9ff4, "f0_format_block_key")
subroutine(0x9e95, "f3_delete_to_eol_key")
subroutine(0x9e51, "f5_end_of_line_key")
subroutine(0x9d90, "f6_insert_line_key")
subroutine(0x9e08, "f7_delete_line_key")
subroutine(0x9dd8, "f8_insert_char_key")
subroutine(0x9e01, "f9_delete_char_key")
subroutine(0xa16f, "f11_copy_key")
subroutine(0xa14c, "sf0_move_block_key")
subroutine(0x9e3e, "sf2_release_margin_key")
subroutine(0xa0ba, "sf3_delete_to_char_key")
subroutine(0x9dec, "sf4_highlight1_key")
subroutine(0x9df0, "sf5_highlight2_key")
subroutine(0x9fdc, "sf6_go_to_marker_key")
subroutine(0x9fca, "sf7_set_marker_key")
subroutine(0x9ea0, "sf8_edit_command_key")
subroutine(0x9f1a, "sf9_delete_command_key")
subroutine(0xa093, "sf11_copy_key")
subroutine(0x9f55, "sf12_left_key")
subroutine(0x9f9b, "sf13_right_key")
subroutine(0xa061, "sf14_down_key")
subroutine(0xa023, "sf15_up_key")
subroutine(0xa12f, "cf0_delete_block_key")
subroutine(0xa220, "cf1_next_match_key")
subroutine(0xa10c, "cf2_format_mode_key")
entry(0xbfb7)
entry(0xbfc1)
entry(0xbfcb)
entry(0xbfd5)
subroutine(0xa11d, "cf3_justify_mode_key")
subroutine(0xa126, "cf4_insert_mode_key")
subroutine(0xa0aa, "cf5_default_ruler_key")
subroutine(0x9d69, "cf6_split_line_key")
subroutine(0x9e59, "cf7_join_lines_key")
subroutine(0x84be, "quit_cmd")
label(0x6a, "edit_input_file_handle")
subroutine(0x823a, "search_cmd")
subroutine(0x8255, "change_cmd")
subroutine(0x82d1, "replace_cmd")
subroutine(0xb2e4, "hex_value_less_than_10")
comment(0xb2e2, "update the first 4 nibbles", align=Align.INLINE)
comment(0xb2f3, "write *GO to the output buffer", align=Align.BEFORE_LINE)
comment(0xb30a, "write the address a7c5 to the output buffer", align=Align.AFTER_LINE)
comment(0xb30d, "insert the CR into the output buffer", align=Align.AFTER_LINE)
label(0xb312, "create_go_command_save_current_brk_handler")
comment(0xb316, "tmp4 is the old brk handler lsb", align=Align.INLINE)
comment(0xb318, "tmp5 is the old brk handler msb", align=Align.INLINE)
subroutine(0xb332, "fix_addresses_after_moved_to_tube")
subroutine(0xb356, "start_view_on_the_tube")
label(0xb9ae, "start_of_free_space")
label(0xbfac, "end_of_free_space")
label(0xbf00, "weird byte")
entry(0xbfac)
labelword(0x17, "printer_driver_ptr")
labelword(0x1d, "ptr3")
label(0x37, "current_screen_mode")
labelword(0x63, "doc_ptr1")
labelword(0x67, "doc_ptr3")
label(0x71, "hscroll_pos")
label(0x77, "ypos")
label(0x7cd, "array_of_screenwidths")
subroutine(0x8cc9, "get_byte_from_file")
subroutine(0x8d2d, "put_byte_to_file")
subroutine(0x8d33, "increment_sp_by_2")



go()

