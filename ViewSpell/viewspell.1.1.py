from commands import *
import acorn

load(0x8000, "viewspell-1.1.rom", "6502")

acorn.bbc()
acorn.is_sideways_rom()
config.set_show_stats(True)
config.set_show_autogenerated_labels(False)
config.set_label_references(True)
config.set_include_assertions(False)
config.set_hex_dump(True)


def inline_string_hook(target, addr):
    n = stringhiz(addr + 3)
    b = get_u8_binary(n)
    if b == 0:
        return n + 1
    return None


def decode_parser_table(addr):
    saddr = addr
    name = ""
    index = 0
    while True:
        b = get_u8_binary(addr)
        if b == 0:
            break
        if b >= 0x80:
            comment(saddr, f"'{name}' -> {index}, flag={b & 0x7f}")
            byte(saddr, len(name))

            name = ""
            saddr = addr + 1
            index += 1
        else:
            name += chr((b ^ ord("[")) & 0xDF)
        addr += 1


def labelword(addr, name):
    word(addr, 2)
    label(addr, name)
    expr_label(addr + 0, f"{name}+0")
    expr_label(addr + 1, f"{name}+1")


def absaddr8(addr):
    addr = memorymanager.BinaryAddr(addr)
    val = memory_binary[addr]
    runtime_addr = movemanager.b2r(addr)
    auto_expr(runtime_addr, str(val))


def immaddr8(addr):
    addr = memorymanager.BinaryAddr(addr)
    label = get_label(
        memory_binary[addr],
        addr,
        binary_addr_type=BinaryAddrType.BINARY_ADDR_IS_AT_LABEL_USAGE,
    )
    runtime_addr = movemanager.b2r(addr)
    auto_expr(runtime_addr, label)


def immaddr(addr_lo, addr_hi):
    addr_lo = memorymanager.BinaryAddr(addr_lo)
    addr_hi = memorymanager.BinaryAddr(addr_hi)
    label = get_label(
        (memory_binary[addr_hi] << 8) | memory_binary[addr_lo],
        addr_lo,
        binary_addr_type=BinaryAddrType.BINARY_ADDR_IS_AT_LABEL_USAGE,
    )
    lo_runtime_addr = movemanager.b2r(addr_lo)
    hi_runtime_addr = movemanager.b2r(addr_hi)
    auto_expr(lo_runtime_addr, make_lo(label))
    auto_expr(hi_runtime_addr, make_hi(label))

subroutine(0x806a, "perform_help_service_call")
entry(0x808a)
subroutine(0x8084, "pass_service_call_to_next_rom")
subroutine(0x80a0, "perform_ukn_osbyte")
subroutine(0x8094, "perform_private_low_workspace","reset CMOS Viewspell workspace byte")
label(0x803e, "unrecognised_star_command")
label(0x80c0, "rom_star_command")
subroutine(0x805d, "call_rom_as_language")
label(0xef, "last_osbyte_A_reg")
label(0xf0, "last_osbyte_X_reg")
label(0xf1, "last_osbyte_Y_reg")
label(0xdf0, "rom_workspace_array")
label(0x80e3, "language_handler_clear_screen")
label(0x80e8, "setup_new_brk_vector")
label(0x80f2, "reset_viewspell_rom_workspace_byte")
entry(0x811f)
entry(0x8136)
subroutine(0x815d, "sub_c815d")
entry(0x817d)
entry(0x81dd)
string(0x81ff)
entry(0x8239)
subroutine(0x829e, "sub_c829e")
string(0x82a6)
entry(0x82ae)
entry(0x830e)
entry(0x830f)
string(0x833c)
subroutine(0x835e, "change_mode")
string(0x9c75)
comment(0x9c8d, "** Probably data")
subroutine(0x9ca2, "sub_9ca2")
string(0x9ccd,4)
entry(0x9cd2)
entry(0x9cd3)
subroutine(0x9cf5, "sub_c9cf5")
entry(0x9d4c)
entry(0x9d66)
entry(0x9d67)
string(0x99dc)
string(0x99df)
string(0x99ed)
string(0x9a01)
subroutine(0x9a23, "sub_9a23")
subroutine(0x9a4e, "sub_9a4e")
subroutine(0x9a64, "sub_9a64")
subroutine(0x9a6e, "sub_9a6e")
subroutine(0x9a7e, "sub_9a7e")
subroutine(0x9a81, "sub_9a81")
subroutine(0x9aa1, "sub_9aa1")
subroutine(0x9ad2, "sub_9ad2")
subroutine(0x9aed, "sub_9aed")
subroutine(0x9bfc, "sub_9bfc")
subroutine(0x9c04, "sub_9c04")
string(0x9c24)
entry(0x9c7c)
string(0x9f87)
entry(0x9f8d)
entry(0x9f8e)
comment(0x9f50, "*** probably data")
byte(0x9fd7,5)
entry(0x9fdc)
entry(0x8983)
entry(0x89b8)
entry(0x89be)
entry(0x89c6)
subroutine(0x8a15, "ukn_cmd_3")

expr_label(0x99bf, "command_table")
expr_label(0x9995, "jumptable_commands")
wordentry(0x9995,21)




go()
