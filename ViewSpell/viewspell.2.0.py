from commands import *
import acorn

load(0x8000, "viewspell-2.0.rom", "65c02")

acorn.bbc()
acorn.is_sideways_rom()
config.set_show_stats(True)
config.set_show_autogenerated_labels(False)
config.set_label_references(True)
config.set_include_assertions(False)
config.set_hex_dump(True)


def inline_string_hook(target, addr):
    n = stringhiz(addr + 3)
    b = get_u8_binary(n)
    if b == 0:
        return n + 1
    return None


def decode_parser_table(addr):
    saddr = addr
    name = ""
    index = 0
    while True:
        b = get_u8_binary(addr)
        if b == 0:
            break
        if b >= 0x80:
            comment(saddr, f"'{name}' -> {index}, flag={b & 0x7f}")
            byte(saddr, len(name))

            name = ""
            saddr = addr + 1
            index += 1
        else:
            name += chr((b ^ ord("[")) & 0xDF)
        addr += 1


def labelword(addr, name):
    word(addr, 2)
    label(addr, name)
    expr_label(addr + 0, f"{name}+0")
    expr_label(addr + 1, f"{name}+1")


def absaddr8(addr):
    addr = memorymanager.BinaryAddr(addr)
    val = memory_binary[addr]
    runtime_addr = movemanager.b2r(addr)
    auto_expr(runtime_addr, str(val))


def immaddr8(addr):
    addr = memorymanager.BinaryAddr(addr)
    label = get_label(
        memory_binary[addr],
        addr,
        binary_addr_type=BinaryAddrType.BINARY_ADDR_IS_AT_LABEL_USAGE,
    )
    runtime_addr = movemanager.b2r(addr)
    auto_expr(runtime_addr, label)


def immaddr(addr_lo, addr_hi):
    addr_lo = memorymanager.BinaryAddr(addr_lo)
    addr_hi = memorymanager.BinaryAddr(addr_hi)
    label = get_label(
        (memory_binary[addr_hi] << 8) | memory_binary[addr_lo],
        addr_lo,
        binary_addr_type=BinaryAddrType.BINARY_ADDR_IS_AT_LABEL_USAGE,
    )
    lo_runtime_addr = movemanager.b2r(addr_lo)
    hi_runtime_addr = movemanager.b2r(addr_hi)
    auto_expr(lo_runtime_addr, make_lo(label))
    auto_expr(hi_runtime_addr, make_hi(label))

subroutine(0x806a, "service_help_command")
subroutine(0x80a0, "service_unknown_osbyte")
subroutine(0x8094, "reset_rom_workspace_in_array", "resets the rom workspace byte", "Resets the rom workspace byte in x to 0")
subroutine(0x8084, "pass_service_call_to_next_rom")
subroutine(0x80c0, "rom_command")
label(0xdf0, "rom_workspace_array")
label(0x8059, "start_as_language")
label(0x8072, "print_rom_title_and_version")
subroutine(0x808a, "get_current_screen_mode", "gets the screen mode","Returns the non-shadow screen mode number", None, {'x' : "Current screen mode (0-7)"}, False, None, False)
subroutine(0x8090, "get_cursor_position", "get the text cursor position", "Gets the x and y value for the text cursor position", None, {'x' : "The text cursors horizontal position", 'y' : "The text cursors vertical position"}, False, None, False)
label(0x5c, "text_cursor_xpos")
label(0x5d, "text_cursor_vpos")
entry(0x8388)
entry(0x839b)
string(0x83cf)
entry(0x83d6)
string(0x83ea)
entry(0x83f6)
string(0x83fc)
entry(0x8403)
entry(0x842d)
label(0xef, "last_osbyte_a_register")
label(0xf0, "last_osbyte_x_register")
label(0xf1, "last_osbyte_y_register")
comment(0x80a9, "check for #&ff view application", align=Align.INLINE)
entry(0x80d4)
label(0x80c9, "default_master_dictionary")
label(0x80e8, "install new brk vector (&86,35)")

subroutine(0x8635, "brk_handler")
immaddr(0x80e9, 0x80ee)
subroutine(0x8be3, "sub_8be3")
subroutine(0x8983, "sub_8983")
subroutine(0x89bb, "sub_89bb")
subroutine(0x89c1, "sub_89c1")

subroutine(0x8c5b, "sub_8c5b")
subroutine(0x8cca, "sub_8cca")
subroutine(0x90d9, "sub_90d9")
subroutine(0x92d1, "sub_92d1")
string(0x937f)
entry(0x9387)
entry(0x9398)
string(0x9392)
entry(0x93a8)
entry(0x93d1)
subroutine(0x9428, "sub_9428")
entry(0x9463)

subroutine(0x97cf, "sub_97cf")
entry(0x984b)
subroutine(0x984c, "sub_984c")
# subroutine(0x9997, "sub_9997")

expr_label(0x9997, "jumptable0_commands")
wordentry(0x9997, 21)
subroutine(0x9a25, "sub_9a25")
subroutine(0x9a50, "sub_9a50")
subroutine(0x9a70, "sub_9a70")
subroutine(0x9a80, "sub_9a80")

subroutine(0x9a83, "sub_9a83")
subroutine(0x9aa3, "sub_9aa3")
subroutine(0x9ad4, "sub_9ad4")
subroutine(0x9aef, "sub_9aef")
subroutine(0x9bda, "sub_9bda")
string(0x9c77)
entry(0x9c7d)
subroutine(0x9ca4, "sub_9ca4")
subroutine(0x9cd4, "sub_9cd4")
subroutine(0x9cd5, "sub_9cd5")
subroutine(0x9cf7, "sub_9cf7")
subroutine(0x9d48, "sub_9d48")
entry(0x9d68)
string(0x9f86)
entry(0x9f8f)
subroutine(0x9f90, "sub_9f90")
entry(0x9fde)
string(0x837b)
labelword(0x25, "corrected_himem")
comment(0x84f4, "remove four pages from himem", align=Align.INLINE)
comment(0x84fc, "remove three more pages from himem", align=Align.INLINE)
labelword(0x27, "further_corrected_himem")
subroutine(0x84ed, "get_himem_store_corrected_values")
subroutine(0x8489, "print_newline_save_cursor", "Prints a new line, backspace and then increments current text cursor forward one")
label(0x0004, "adjusted_xpos")
entry(0x86ef)
entry(0x8703)
label(0x8859, "Nick_Dean")
entry(0x8862)
string(0x8884)
subroutine(0x8895, "sub_8895")
subroutine(0x88b8, "sub_88b8")
stringhi(0x88e3)
comment(0x88e3, "Saving with Bit 8 set hi", align=Align.INLINE)
string(0x899e)
entry(0x88e9)
comment(0x9c35, "increment JSR return LSB from stack", align=Align.INLINE)
comment(0x9c38, "is page boundary", align=Align.INLINE)
comment(0x9c3a, "increment JSR return MSB from stack", align=Align.INLINE)
comment(0x9c47, "pointer to inline string", align=Align.INLINE)
entry(0x9c20)
subroutine(0x84b9, "move_cursor", "move cursor to X and Y register position", "Moves the cursor to the (x,y) position on screen using the X and Y registers, stores the x, y position in l0018 and l0019 (age?)", {'x' : "horizontal position", 'y' : "vertical position"}, {'x' : "Stores x in pointer1", 'y' : "Stores y in pointer1+1"}, False, None, False)
subroutine(0x84d0, "store_page")
subroutine(0x84b7, "prepare_to_move_cursor")
subroutine(0x9c5f, "check_for_underline_token", "check for _ in string", "If there is an underline in the string and the x cursor is at 0, print a newline, otherwise just print a space")
subroutine(0x9c70, "check_for_backtick_token")
labelword(0x18, "pointer1")
subroutine(0x9c58, "check_for_tokens")
subroutine(0x9c2e, "print_inline_string")
label(0x871f, "osword_block")
subroutine(0x9c15, "check_for_percent_token", "check for ` and replace with text", "replaces ` with the word ' words'")
entry(0x817d)
string(0x81d5)
entry(0x81dd)
entry(0x829f)
string(0x82a5)
entry(0x82ae)
entry(0x8403)
entry(0x830e)
string(0x833c)
entry(0x8341)
string(0x9101)
entry(0x9108)
string(0x9357)
entry(0x935e)
string(0x9564)
entry(0x956a)
entry(0x9585)
string(0x95fe)
entry(0x9612)
entry(0x9694)
byte(0x9fd9, 5)
subroutine(0x86fb, "print_All")
subroutine(0x86e7, "print_ser")
subroutine(0x805f, "call_osbyte")
comment(0x8095, "Get the rom number from the stack", align=Align.INLINE)
comment(0x809b, "reset the rom workspace byte", align=Align.INLINE)
labelword(0x7d, "pointer2")
subroutine(0x8fbb, "store_x_y_in_pointer2")
entry(0x8189)
subroutine(0x81d3, "print_Mistake")
subroutine(0x9cc3, "read_bytes_from_files", "read bytes from a file", "osgbpb block indirect through 0x62")
subroutine(0x8062, "end_of_rom_command")
comment(0x804e, "Convert to uppercase", align=Align.INLINE)
comment(0x97a6, "Write bytes to file using osgbpb", align=Align.INLINE)
subroutine(0x9cc5, "call_osgbpb_with_block")
label(0x8172, "print_Escape")
subroutine(0x816d, "acknowledge_escape_pressed")
label(0xff, "os_escape_flag")
subroutine(0x813b, "os_escape_flag_set")
subroutine(0x817e, "check_os_escape_flag")
byte(0x8423,2)
subroutine(0x841c, "set_cursor_thick_and_fast_blink")
subroutine(0x83fa, "print_single_digit_number")
byte(0x83ff, 3)

entry(0x83fc)
byte(0x8402)
entry(0x8403)
comment(0x83fa, "convert to printable character", align=Align.INLINE)
comment(0x8408, "branch if current cursor vpos is different from saved value", align=Align.INLINE)
subroutine(0x8411, "check_for_mode_7")
byte(0x83bf, 4)
entry(0x83c3)
subroutine(0x85b6, "print_space")
subroutine(0x85ba, "print_full_stop")
subroutine(0x85bf, "sub_85bf")
labelword(0x0484, "input_buffer")
entry(0x876d)
subroutine(0x9cee, "load_file_with_block")
subroutine(0x9cf0, "osfile_with_block", "call osfile with parameter block",None, {'x' : "parameter block LSB", 'y' : "parameter block MSB"}, None, False, None, False)
comment(0x8924, "save file", align=Align.INLINE)
comment(0x9537, "read information", align=Align.INLINE)
subroutine(0x9543, "sub_9543")
string(0x955d,4)
subroutine(0x955a, "print_not_space")
subroutine(0x9561, "print_found")
label(0x95f4, "print_CR_In")
subroutine(0x9605, "print_dictionary")
label(0x8724, "probably_more_data")
entry(0x8727)
byte(0x9695,7)
byte(0x969c,8)
subroutine(0x90d0, "decrement_pointer_over_page_boundary")
subroutine(0x90d6, "decremented_LSB_still_in_page")
subroutine(0x90c9, "increment_ponter_over_page_boundary")
label(0x90fe, "print_Loading")
label(0x937c, "print_prefix_settings")
label(0x938f, "print_U_bracket_ser")
label(0x93a3, "print_T_bracket_ext")
subroutine(0x957b, "print_Word")
subroutine(0x95fb, "print_master")
subroutine(0x968a, "print_u_expand_ser")
label(0x9840, "print_Deleted")
string(0x9c26,3)
subroutine(0x9c23, "print_bad")
subroutine(0x836b, "print_viewspell_heading_details")
subroutine(0x9c2b, "call_osasci")
subroutine(0x829f, "print_unique_words")
subroutine(0x8297, "print_space_words")
byte(0x829d,2)
entry(0x811f)
entry(0x8136)
subroutine(0x8114, "print_insert_disk_press_key")
subroutine(0x85a9, "print_filename")
comment(0x85af, "pointer2 is currently output filename pointer", align=Align.INLINE)
subroutine(0x8183, "print_input_cursor", "Prompts for user command", "Prompts for user command, checks if user enters a star command")
subroutine(0x815d, "read_user_command_from_prompt")
subroutine(0x9504, "skip_over_space")
label(0x9354, "bad_prefix_letter_choice")
comment(0x933c, "convert to Uppercase", align=Align.INLINE)
subroutine(0x9350, "check_for_prefix_text")
subroutine(0x9346, "check_for_prefix_master")
subroutine(0x950f, "shuffle_down_input_buffer")
subroutine(0x9505, "fix_up_input_buffer")
label(0x83ca, "print_Source")
label(0x83e5, "print_screen_mode")
subroutine(0x8a1c, "cmark_cmd")
subroutine(0x94a0, "create_cmd")
subroutine(0x8a18, "mark_cmd")
subroutine(0x88ce, "save_cmd")
subroutine(0x89c9, "screen_cmd")
subroutine(0x9464, "name_cmd")
subroutine(0x8833, "add_cmd")
subroutine(0x956f, "add_word_cmd")
subroutine(0x8676, "check_cmd")
subroutine(0x8a2d, "context_cmd")
subroutine(0x956b, "delete_word_cmd")
subroutine(0x88e9, "list_cmd")
subroutine(0x9d69, "search_cmd")
subroutine(0x823a, "load_cmd")
subroutine(0x830f, "mode_cmd")
subroutine(0x80d4, "new_cmd")
subroutine(0x8239, "read_cmd")
subroutine(0x932f, "prefix_cmd")
subroutine(0x9f57, "marker_cmd")
subroutine(0x947b, "user_cmd")
subroutine(0x8856, "mark1_cmd")
label(0x99c1, "command_table")
subroutine(0x84cb, "get_oshwm", "get value for top", "get top and store in pointer1, which gets used for lots of things", None, {'x' : "LSB of top", 'y' : "MSB of top"}, False, None, False)
string(0x99de)
string(0x99e1)
string(0x99ef)
string(0x9a03)
string(0x81ff)
entry(0x8203)
subroutine(0x81fc, "print_name")
subroutine(0x82fe, "print_memory_full")
subroutine(0x835e, "change_screen_mode")
subroutine(0x8339, "print_bad_mode")
subroutine(0x8342, "check_screen_mode_and_enough_memory")
label(0x9459, "print_directory")
subroutine(0x9c74, "print_words")
subroutine(0x9449, "no_drive_indicator")
subroutine(0x93d3, "prefix_dictionary_directory")
byte(0x9c7d)
entry(0x9c7e)
subroutine(0x8cf3, "save_file")
immaddr(0x8fb8, 0x8fba)
subroutine(0x9d4e, "open_file_for_input")
subroutine(0x9d50, "call_osfind_with_block")
comment(0x9d58, "non 0 means file operation worked", align=Align.INLINE)
subroutine(0x9c63, "print_CR_if_cursor_not_start_of_line")
subroutine(0x9537, "get_file_information")
comment(0x953d, "file was not found", align=Align.INLINE)

subroutine(0x85a6, "print_CR_then_filename")
subroutine(0x9554, "get_file_info_then_print_filename_not_found")
subroutine(0x8f85, "print_LF_CR")
subroutine(0x9532, "check_file_exists")
subroutine(0x9557, "print_CR_filename_not_found")
label(0x84dc, "not_a_page_boundary")
labelword(0x1f, "page")
labelword(0x3a, "copy_of_poge")
subroutine(0x84df, "move_page_value_to_next_integer_page")
subroutine(0x84e5, "store_page_in_variables", "Stores two copies of page in zero page memory", "Stores two copies of page in zero page locations", {'x' : "page LSB", 'y' : "page MSB"}, None, False, None, False)
subroutine(0x84d5, "fixup_page")
subroutine(0x8504, "sub_8504","", "", {'x' : "page LSB", 'y' : "page MSB"}, None, False, None, False)
subroutine(0x8515, "sub_8515", "", "", {'x' : "page LSB", 'y' : "page MSB"}, None, False, None, False)
labelword(0x23, "page_pointer")
label(0x0437, "directory_name")
subroutine(0x85a0, "reset_directory_name")
immaddr(0x8fb2, 0x8fb4)
subroutine(0x92f3, "clear_carry_as_lowercase")
subroutine(0x92eb, "set_carry_flag_based_on_case")
subroutine(0x92e8, "convert_to_upper")
comment(0x8186, "decodes to =>", align=Align.INLINE)
label(0x8199, "not_star_command")
subroutine(0x81a4, "reset_variables_4c_to_5b_to_zero")
label(0x62, "output_file_handle")
label(0x9491, "data_table1")
label(0x9499, "data_table2")
label(0x4b, "editing_file_flag")
subroutine(0x8439, "wipe_variables_from_00_to_8f", "reset some zero page variables", "Wipes some of the zero page variables, but keeps 0x0a", {'x' : "offset for indirect"}, None, False, None, False)
label(0x0436, "prefix_array")
label(0x80c5, "data_table3")
go()






