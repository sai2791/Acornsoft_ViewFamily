from commands import *
import acorn

load(0x8000, "view-b3.3.rom", "65c02")

acorn.bbc()
acorn.is_sideways_rom()
config.set_show_stats(False)
config.set_show_autogenerated_labels(False)
config.set_label_references(True)
config.set_include_assertions(False)


def inline_string_hook(target, addr):
    n = stringhiz(addr + 3)
    b = get_u8_binary(n)
    if b == 0:
        return n + 1
    return None


def decode_parser_table(addr):
    saddr = addr
    name = ""
    index = 0
    while True:
        b = get_u8_binary(addr)
        if b == 0:
            break
        if b >= 0x80:
            comment(saddr, f"'{name}' -> {index}, flag={b & 0x7f}")
            byte(saddr, len(name))

            name = ""
            saddr = addr + 1
            index += 1
        else:
            name += chr((b ^ ord("[")) & 0xDF)
        addr += 1


def labelword(addr, name):
    word(addr, 2)
    label(addr, name)
    expr_label(addr + 0, f"{name}+0")
    expr_label(addr + 1, f"{name}+1")


def ldaaddr(addr, name):
    lo = get_u8_binary(addr + 1)
    hi = get_u8_binary(addr + 3)
    label(lo | (hi << 8), name)
    expr(addr + 1, make_lo(name))
    expr(addr + 3, make_hi(name))
    
def immaddr8(addr):
    addr = memorymanager.BinaryAddr(addr)
    label = get_label(
        memory_binary[addr],
        addr,
        binary_addr_type=BinaryAddrType.BINARY_ADDR_IS_AT_LABEL_USAGE,)
    runtime_addr = movemanager.b2r(addr)
    auto_expr(runtime_addr, label)

labelword(0x0F, "himem")
labelword(0x17, "printer_driver_ptr")
labelword(0x1f, "oshwm")

label(0x35, "screen_height")
label(0x36, "screen_width")
label(0x8021,"Format_Flags")
label(0x8163,"WORD_string")
label(0x814e,"string_VIEW_SETUP")

comment(0x807e,"Unknown Status Command", indent=0, word_wrap=True, align=Align.INLINE)
comment(0x8082,"Unknown Configure Command", indent=0, word_wrap=True, align=Align.INLINE)

comment(0x8086,"Help command", indent=0, word_wrap=True, align=Align.INLINE)
comment(0x808a,"Unknown Osbyte", indent=0, word_wrap=True, align=Align.INLINE) 
comment(0x808e,"Private low workspace size", indent=0, word_wrap=True, align=Align.INLINE)
comment(0x8092,"Unknown * Command", indent=0, word_wrap=True, align=Align.INLINE) 
comment(0x815b,"get view rom socket number from stack", indent=0, word_wrap=True, align=Align.INLINE)
comment(0x815f,"get format details from CMOS position 30+x", indent=0, word_wrap=True, align=Align.INLINE)
comment(0x815f,"30+ROM b0    NoFormatting/Formatting", indent=0, word_wrap=True, align=Align.AFTER_LINE)
comment(0x815f,"       b1    No Justification/Justification", indent=0, word_wrap=True, align=Align.AFTER_LINE)
comment(0x815f,"       b2    Overwrite/Insert", indent=0, word_wrap=True, align=Align.AFTER_LINE)
comment(0x815f,"       b3-b7 unused", indent=0, word_wrap=True, align=Align.AFTER_LINE)
comment(0x80c9,"if carry clear flag is not set",align=Align.INLINE)
comment(0x8d60,"before letter A",align=Align.INLINE)
comment(0x8d62,"Letter A-Z",align=Align.INLINE)
comment(0x8d66,"before lower case a",align=Align.INLINE)
comment(0x8d6a,"Letter a-z", align=Align.INLINE)
comment(0x8d5b,"Convert to Upper Case", align=Align.INLINE)
comment(0x8127,"check for &FF", align=Align.INLINE)

subroutine(0x80BA, "Ukn_Status_cmd", "Unknown Status command", "The user has issued a *Status command for a variable not recognised by MOS", {'a' : "Service call number", 'x' : "Current ROM number"},None, False, None, False)
subroutine(0x8033, "Ukn_Config_cmd", "Unknown Configure Command", "Is this a VIEW SETUP command", None, None, False, None, False) 
subroutine(0x80A5, "HELP_Cmd", "Respond to Help Service Call", "Respond to *help", None, None, False, None, False)
subroutine(0x80E2, "Ukn_Osbyte","Unknown Osbyte call", "An unrecognised Osbyte call has been made. Uses MOS values in zp for last a,x,y used in osbyte call. (&ef, &f0, &f1)") 
subroutine(0x80DD, "Prv_low_wkspace_size")
subroutine(0x80B8, "Ukn_Star_cmd")
subroutine(0x8141, "prt_VIEW_SETUP", "Print View Setup", "Print the VIEW SETUP string", None, None, False, None, False)
subroutine(0x815A, "get_format_settings_cmos_position", "get format settings from CMOS based on rom number", "Gets the rom number for view, then calculates the CMOS position reserved for that rom number", None, {'x' : "CMOS position for View Settings"}, False, None, False)
label(0x80C8, "format_move_bit_to_carry")
subroutine(0x80D3, "get_next_flag")
subroutine(0x80b6, "restore_AXY_reg_and_exit")
subroutine(0x8121, "check_for_star_WORD", "Check for the WORD command", "Is this the WORD command",{'x' : "Offset from start of word to check"}, None, False, None, False)
subroutine(0x8d5e, "check_for_letter", "Check for letter", "set the carry flag if A-Z, or a-z", {'a' : "Character to check"}, None, False, None, False)
subroutine(0x8024, "write_FJI_cmos_byte")
subroutine(0x813a, "set_C_flag_and_return", "Set the C flag and return", "", None, {"c" : "set the carry flag"}, False, None, False)
subroutine(0x8d56, "convert_to_upper_if_char")
subroutine(0x959d, "call_printer_driver")
subroutine(0x95ad, "default_print_driver")
subroutine(0x9585, "prepare_print_driver")
subroutine(0x86a7, "change_mode", "Change screen mode", "", None, None, False, None, False)
subroutine(0x8f6e, "return_file_system_no", "Return Filing system number", None, None, {'a' : "Filing system number"}, False, None, False)
subroutine(0xaa12, "print_inline_string", "Print inline String", "Prints text to screen, pulls text address from stack and adds 1", None, None, False, None, False)
label(0x4e, "error_handling_mode")

string(0x82ca)
string(0x8ae0)
string(0x8b19)
string(0x8fa5)
string(0x9108)
string(0x860d)
string(0x8397)
string(0x83ad)
string(0x864f)
string(0x81e7)
string(0x820b)

entry(0x8afc)
entry(0x8ae8)
entry(0x8ae9)
entry(0x8b22)
entry(0x8b23)
entry(0x8d6f)
entry(0x8d80)
entry(0x8e0c)
entry(0x8e15)
entry(0x8e39)
entry(0x8e70)
entry(0x8e76)
entry(0x8e8b)
entry(0x8ee5)
entry(0x8fae)
entry(0x8faf)
entry(0x8f10)
entry(0x911a)
entry(0x95b0)
entry(0x95b3)
entry(0x95b6)
entry(0x95b9)
entry(0x896c)
entry(0x89db)
entry(0x89fb)
entry(0x8b44)
entry(0x8c6b)
entry(0x8c6e)
entry(0x82fe)
entry(0x8349)
entry(0x8364)
entry(0x83e0)
entry(0x84ef)
entry(0x8526)
entry(0x84f4)
entry(0x84f7)
entry(0x8508)
entry(0x8530)
entry(0x8576)
entry(0x85b3)
entry(0x85e5)
entry(0x8620)
entry(0x867e)
entry(0x86c0)
entry(0x81f3)
entry(0x8219)
string(0x8221)
string(0x8229)
string(0x8289)
entry(0x821a)
entry(0x8226)
string(0x8329)
entry(0x8707)
entry(0x8731)
entry(0x8761)
string(0x8745)
entry(0x874c)
string(0x875a)
entry(0x8766)
entry(0x8772)
string(0x87fd)
entry(0x8812)
entry(0x8816)
entry(0x885f)
entry(0x8865)
string(0x887f)
string(0x888f)
string(0x889c)
entry(0x8888)
entry(0x88a5)
string(0x8896)
string(0x8f5c)
comment(0x8f57, "filing system is not cassette", indent=0, word_wrap=True, align=Align.AFTER_LINE)
string(0x9399)
entry(0x939f)
entry(0x8240)
entry(0x825b)
entry(0x8276)
string(0x8252)
string(0x8271)
comment(0xaa29, "string ends in &ff so is error message")
subroutine(0xaa3c, "error_handling")
subroutine(0xa98a, "Ack_Escape")
entry(0x966a)
entry(0x99c0)
comment(0x84f1, "Turn on Auto Paging", indent=0, word_wrap=True, align=Align.AFTER_LINE)
comment(0x8523, "Turn off Auto Paging", indent=0, word_wrap=True, align=Align.AFTER_LINE)
string(0x895d)
comment(0x8540, "Open file for input", align=Align.INLINE)
comment(0x854f, "Open file for output")
comment(0x85f2, "Open file for output")
comment(0x8629, "Open file for input")
comment(0x901b, "Open file for input")
subroutine(0x894d, "call_osfind", "Call osfind", "Open a file for input or output, returning error if the file does not exist", {'a' : "Osfind function"} , {'a' : ">0 handle for file, =0 not found",'x' : "LSB of filename", 'y' : "MSB of filename"}, False, None, False)
subroutine(0x8957, "file_not_found")
label(0x8173, "format_flags")
comment(0x805e, "if its a space move on to next character")
comment(0x8065, "set x to 0 for the inside of the loop")

subroutine(0xb1f3, "initialise_document")
subroutine(0xa99a, "clear_screen")
subroutine(0xa9e5, "cursor_on")
subroutine(0xa9b1, "setup_CRTC_10_write")
label(0x37, "current_screen_mode")
subroutine(0xa9a3, "complete_CRTC_10_write")
subroutine(0xa9f4, "save_cursor_position","Save current cursor position", "", None, {"X" : "Horizontal Position","Y" : "Vertical position"}, False, None, False)


subroutine(0xaa4a, "prt_view_or_view_and_version")

label(0x89, "tmp4")
label(0x8a, "tmp5")
subroutine(0xa9fe, "restore_cursor_position")
subroutine(0xaa02, "set_cursor_position", "Set Cursor Position", "Sets the text cursor to the x,y position on screen", {'x' : "horizontal position", 'y' : "Vertical position"}, {'a' : "Preserved"}, False, None, False)
subroutine(0x82b9, "cli_loop")
label(0x69, "print_flag")
subroutine(0x8513, "stop_printing")
subroutine(0x850d, "print_to_screen")
expr_label(0x500, "input_buffer")
expr_label(0x400, "print_driver_blocks")
label(0x0784, "printer_driver_name")
labelword(0x53, "marker_array")
entry(0x8298)
label(0x07b6, "register_value_p")
label(0x8d, "tmp8")
label(0x8e, "tmp9")
ldaaddr(0xa8c5, "oswrch")
label(0x8b, "tmp6")
label(0x8c, "tmp7")
label(0x22, "top_margin")
label(0x23, "bottom_margin")
label(0x24, "header_margin")
label(0x25, "footer_margin")
label(0x26, "page_length")
label(0x27, "line_spacing")
label(0x28, "footers_enabled_flag")
label(0x29, "headers_enabled_flag")
label(0x2a, "highlight1_code")
label(0x2b, "highlight2_code")
label(0x2c, "rhs_extra_margin")
label(0x2d, "macro_executing_flag")
label(0x2e, "two_sided_flag")
label(0x2f, "left_margin")
labelword(0x04,"current_format_line_ptr")

entry(0xa8a9)

label(0x7cc, "line_length")
subroutine(0xa89b, "render_number_to_go_buffer")
label(0xa8ab, "emit_to_gobuffer_callback")
entry(0xa8ab)
label(0x0654, "output_buffer")
entry(0x95ce)
entry(0x95d1)
entry(0x95d4)
entry(0x95d7)
entry(0x95d8)

label(0xb4e2, "commands_table")
for addr in range (0xb4e2, 0xb50f, 2):
    string(addr,2)

wordentry(0xb511,23)
expr_label(0xb511, "jumptable4")

subroutine(0x96de, "ce_fmt_cmd", "Centre", "Centre the text")
subroutine(0x96fd, "rj_fmt_cmd", "Right Justify", "Right justify the text")
subroutine(0x9776, "df_fmt_cmd", "Define Footer", "Defines the page footer, left, centre and right justified")
subroutine(0x9770, "dh_fmt_cmd", "Define Header", "Defines the page header, left, centre and right justified")
subroutine(0x9874, "dm_fmt_cmd", "Define Macro", "a one or two letter name which must be uppercaxe. Cannot be the same as any of the pre-defined command names")
subroutine(0x97c1, "em_fmt_cmd", "End Macro", "End the macro definition")
subroutine(0x982a, "pe_fmt_cmd", "Page End")
subroutine(0x97fa, "tm_fmt_cmd", "Top Margin", "Sets the top margin to n lines. TM 0 turns off the top margin, defaults to 4 lines")
subroutine(0x9802, "bm_fmt_cmd", "Bottom Margin")
subroutine(0x97e3, "pl_fmt_cmd", "Page Length", "Sets the page length to n lines. The default page length is 66 lines, which includes headers, footers, top margin and bottom margin. Can be set from 3 lines to 255 lines.")
subroutine(0x97eb, "ts_fmt_cmd", "Two sided On/Off")
subroutine(0x9856, "fo_fmt_cmd", "Footer On/Off")
subroutine(0x9860, "he_fmt_cmd", "Header On/Off")
subroutine(0x990a, "ht_fmt_cmd", "Highlight character")
subroutine(0x980a, "hm_fmt_cmd", "Header Margin", "Sets the top margin to n lines. HM 0 turns off the top margin, defaults to 4 lines")
subroutine(0x9812, "fm_fmt_cmd", "Footer Margin", "Sets the footer margin to n lines.  FM 0 turns the margin off, the default is 4 lines")
subroutine(0x981a, "lm_fmt_cmd", "Left Margin", "Sets the left margin to n spaces. The default is 0")
subroutine(0x9822, "ls_fmt_cmd", "Line Spacing", "Prints n blank lines between the lines of text")
subroutine(0x983b, "op_fmt_cmd", "Odd Page", "Gives one page end if on an even numbered page, two page ends otherwise")
subroutine(0x9843, "ep_fmt_cmd", "Even Page", "Gives one pages end if on an odd numbered page, two page ends otherwise")
subroutine(0x96d5, "lj_fmt_cmd", "Left Justify", "Left justify the text")
subroutine(0x986a, "pb_fmt_cmd", "Page Break On/Off", "PB ON enables page breaks. PB OFF disables page breaks, which are enabled by default")

entry(0x96d5)
label(0xb386, "decimal_table")
label(0xb38e, "non_function_key_table")
expr_label(0xb393, "jumptable_ptrs")
word(0xb393, 4)
expr_label(0xb39b, "jumptable1_editor")
wordentry(0xb39b, 52)
wordentry(0xb403, 25)
expr_label(0xb403, "jumptable2_format")
wordentry(0xb435, 3)
expr_label(0xb435, "jumptable3_cli")
subroutine(0xb53f, "get_next_bit_of_relocation_table")
subroutine(0xb56a, "create_go_command")
label(0xb5f2, "relocation_table")

label(0xb447, "parser_table")
decode_parser_table(0xb447)
subroutine(0x82fe, "esc_key")
subroutine(0x9f86, "return_key")
subroutine(0xa00b, "delete_key")
subroutine(0xa03b, "tab_key")
subroutine(0xa249, "f0_format_block_key")
subroutine(0xa26b, "f1_top_of_text_key")
subroutine(0xa2a9, "f2_bottom_of_text_key")
subroutine(0xa0e8, "f3_delete_to_eol_key")
subroutine(0xa09d, "f4_beginning_of_line_key")
subroutine(0xa0a4, "f5_end_of_line_key")
subroutine(0x9fe3, "f6_insert_line_key")
subroutine(0xa05b, "f7_delete_line_key")
subroutine(0xa02b, "f8_insert_char_key")
subroutine(0xa054, "f9_delete_char_key")
subroutine(0xa3c6, "f11_copy_key")
subroutine(0x9f5f, "f12_left_key")
subroutine(0x9f56, "f13_right_key")
subroutine(0x9f7f, "f14_down_key")
subroutine(0x9f66, "f15_up_key")
subroutine(0xa3a3, "sf0_move_block_key")
subroutine(0x9f47, "sf1_swap_case_key")
subroutine(0xa091, "sf2_release_margins_key")
subroutine(0xa30f, "sf3_delete_to_char_key")
subroutine(0xa03f, "sf4_highlight1_key")
subroutine(0xa043, "sf5_highlight2_key")
subroutine(0xa231, "sf6_goto_marker_key")
subroutine(0xa21f, "sf7_set_marker_key")
subroutine(0xa0f3, "sf8_edit_command_key")
subroutine(0xa16f, "sf9_delete_command_key")
subroutine(0xa2e8, "sf11_copy_key")
subroutine(0xa1aa, "sf12_left_key")
subroutine(0xa1f0, "sf13_right_key")
subroutine(0xa2b6, "sf14_down_key")
subroutine(0xa278, "sf15_up_key")
subroutine(0xa386, "cf0_delete_block_key")
subroutine(0xa477, "cf1_next_match_key")
subroutine(0xa363, "cf2_format_mode_key")
subroutine(0xa374, "cf3_justify_mode_key")
subroutine(0xa37d, "cr4_insert_mode_key")
subroutine(0xa2ff, "cr5_default_ruler_key")
subroutine(0x9fbc, "cr6_split_line_key")
subroutine(0xa0ac, "cr7_join_lines_key")
subroutine(0xa148, "cr8_mark_as_ruler_key")

subroutine(0x85d2, "quit_cmd")
subroutine(0x885f, "new_cmd")
subroutine(0x8816, "format_cmd")
subroutine(0x8707, "setup_cmd")
subroutine(0x8620, "read_cmd")
subroutine(0x8576, "more_cmd")
subroutine(0x84ef, "screen_cmd")
subroutine(0x84f7, "sheets_cmd")
subroutine(0x89fb, "save_cmd")
subroutine(0x8766, "count_cmd")
subroutine(0x874c, "field_cmd")
subroutine(0x88a5, "printer_cmd")
subroutine(0x8349, "search_cmd")
subroutine(0xb2d3, "clear_cmd")
subroutine(0x86c0, "microspace_cmd")
subroutine(0x8865, "fold_cmd")
subroutine(0x89db, "name_cmd")
subroutine(0x867e, "mode_cmd")
subroutine(0x85b3, "finish_cmd")
subroutine(0x8508, "print_cmd")
subroutine(0x8364, "change_cmd")
subroutine(0x85e5, "write_cmd")
subroutine(0x8530, "edit_cmd")
subroutine(0x83e0, "replace_cmd")
subroutine(0x896c, "load_cmd")

subroutine(0xaa4a,"prt_view_or_view_and_version", "print view or view and version", "Prints either VIEW or VIEW B3.3, if x is 0 then only print title, if x is positive print title and version", {'x' : "if x > 0 then print VIEW and version"}, None, False, None, False)
subroutine(0xaa42, "print_title", "Print ROM name or ROM name and Version", "This subroutine prints out VIEW or VIEW B3.3 based on the value in x", None, None, False, None, False)
comment(0x80ae, "x is positive so title and version")
comment(0x81d1, "x is 0 so title only")

subroutine(0xa99e, "cursor_off")
subroutine(0xa88e, "home_cursor")
subroutine(0xa8c1, "render_number_to_callback")

subroutine(0xa984, "escape_pressed")
subroutine(0xa9c0, "draw_prompt_characters")
subroutine(0xa786, "set_inverted_text_if_not_mode_7")
subroutine(0xa774, "set_normal_text_if_not_mode_7")

label(0x85, "tmp0")
label(0x86, "tmp1")
labelword(0x7f, "input_buffer_ptr")
subroutine(0x9d39, "clear_carry_and_return")
label(0x4f, "format_mode_flag")
subroutine(0xad09, "get_line_length")
subroutine(0xb195, "check_for_command_prefix")
subroutine(0xb193, "deref_and_check_for_command_prefix")
labelword(0x00, "ptr1")
subroutine(0xad84, "set_carry_flag")
subroutine(0x8d6d, "set_carry_flag_2")


string(0x8ab9)
subroutine(0x8e76, "close_file_indirect", "Close file indirect", "", {'x' : "address of ZP variable containing handle"},  None, False, None)
label(0x4d, "rw_file_handle")
subroutine(0x8e80, "close_file")
subroutine(0xb1e2, "compute_bytes_free", "comput bytes free", "Determine the number of bytes left between the end of text and himem", None, {'x' : "LSB of bytes free", 'y' : "MSB of bytes free"}, False, None, False)
labelword(0x0d, "end_of_text_ptr")
label(0x0a, "zp_initalisation_flag")
label(0x05ce, "document_initialisation_flag")

comment(0x80f1, "read view's rom workspace byte")
subroutine(0x8116, "app_support_read_format_settings","Application support read view format settings")
label(0xef, "last_os_osbyte_a_reg")
label(0xf0, "last_os_osbyte_x_reg")
label(0xf1, "last_os_osbyte_y_reg")
subroutine(0x8108,"get_rom_workspace_byte","Get ROMS workspace byte", "Get the workspace byte from &df0 + Rom number", {'a' : "Rom number"}, None, False, None, False)

comment(0x8035, "Check for no more text")
subroutine(0x8049, "check_for_VIEW_SETUP","Check for VIEW SETUP", "Compares the input buffer to the word VIEW SETUP for the unknown configure service call", {'y' : "Offset to input buffer (&F2),y" },None, False, None, False)
label(0xff, "os_escape_flag")
label(0xfd, "os_error_message_pointer")

subroutine(0x8a41, "do_osfile_with_block")
comment(0x8a39, "Save a block of memory using parameter block")
subroutine(0x8a09, "copy_filename_to_workspace")
subroutine(0x8a14, "populate_start_end_address_parameter_block")

subroutine(0x8a52, "sanitize_area")
labelword(0x5f, "area_start_ptr")
labelword(0x61, "area_end_ptr")

subroutine(0x8a7e, "parse_mark_from_command")
label(0x8aa8, "error_bad_marker")
label(0x8ab6, "error_marker_not_set")
label(0x81e2, "print_bytes_free")
label(0x8226, "print_empty")
label(0x8230, "print_screen_mode")
label(0x8284, "print_markers_set")
label(0x82c5, "print_prompt")
label(0x8326, "error_mistake")
label(0x83aa, "error_no_target_given")
label(0x83bd, "error_no_string_found")
string(0x83c0)
label(0x8607, "error_not_enough_memory")
label(0x864c, "error_not_all_read_in")
label(0x86b4, "error_bad_mode")
label(0x86df, "error_no_microspacing")
label(0x8725, "error_bad_flag")
label(0x8757, "error_frump")
label(0x87fa, "error_words_counted")
label(0x887c, "print_folding")
label(0x888c, "error_off")
label(0x8893, "error_on")
label(0x8899, "error_bad_file")
label(0x895a, "error_file_not_found")
label(0x8add, "print_editing")
string(0x8b03)
label(0x8b00, "print_to")
label(0x8b16, "print_no_file")
label(0x8f00, "error_bad_filename")
label(0x8f59, "error_not_with_cassette")
label(0x8fa2, "print_no_text")
label(0x9105, "print_nested_macro_call")
label(0x9398, "print_page")
label(0x8208, "print_input_file_is")
label(0x821e, "print_not")
label(0x824f, "print_printer")
label(0x826e, "print_m_in_brackets")
label(0x8394, "error_strings_changed")
label(0x95ce, "print_driver_code")
comment(0x95ce, "printer_driver_print_character", align=Align.INLINE)
comment(0x95d1, "printer_driver_start_printer", align=Align.INLINE)
comment(0x95d4, "printer_driver_stop_printer", align=Align.INLINE)
entry(0x95db)
entry(0x9616)
entry(0x9625)
entry(0x965a)
labelword(0x02, "current_edit_line_ptr")
labelword(0x0b, "page")
label(0x40, "xpos")
label(0x78, "print_xpos")
label(0x7b, "current_tab_key")
label(0x75c, "filename_buffer")
label(0x770, "output_filename")
label(0x7ec, "document_filename")
label(0x0df0, "rom_workspace_array")
label(0x8b23, "brk_handler")
label(0x81b4, "error_handler_ptr")
entry(0x81b9)
subroutine(0xb552, "write_hex_to_go_buffer")
label(0xb5dc, "star_go")
labelword(0x06, "current_ruler_ptr")
labelword(0x08, "current_line_ptr")
labelword(0x13, "ptr6")
labelword(0x15, "ptr5")
labelword(0x19, "first_macro_ptr")
labelword(0x1b, "last_macro_ptr")
labelword(0x1d, "ptr3")
labelword(0x32, "printing_from_file_flag")
label(0x3c, "file_edit_flags")
label(0x3e, "ruler_right_stop")
label(0x3f, "ruler_left_stop")
label(0x41, "input_file_empty_flag")
labelword(0x4b, "ptr2")
label(0x50, "justifying_flag")
label(0x51, "insert_mode_flag")
label(0x52, "is_tube_flag")
labelword(0x63, "doc_ptr1")
labelword(0x65, "doc_ptr2")
labelword(0x67, "doc_ptr3")
label(0x6a, "edit_input_file_handle")
label(0x6b, "edit_output_file_handle")
label(0x6c, "microspacing_flag")
label(0x6e, "line_buffer_needs_unpack_flag")
label(0x71, "hscroll_pos")
label(0x75, "flags_need_redrawing_flag")
label(0x77, "ypos")
label(0x78, "print_xpos")
label(0x7c, "folding_flag")
label(0x7d, "cursor_moved_flag")
label(0x87, "tmp2")
label(0x88, "tmp3")
label(0x545, "current_line_buffer")
label(0x5cf, "current_ruler_buffer")
comment(0x8fe0, "#<(current_ruler_buffer)", align=Align.INLINE)
comment(0x8fe4, "#>(current_ruler_buffer)", align=Align.INLINE)
label(0x6d8, "header_text_maybe")
label(0x71a, "footer_text_maybe")
label(0x798, "register_value_array")
label(0x7ae, "register_value_l")
label(0x7ec, "input_filename")

subroutine(0xb19d, "system_init")
subroutine(0xb1d4, "detect_tube")
comment(0xb26a, "#<(current_line_buffer)", align=Align.INLINE)
comment(0xb275, "#>(current_line_buffer)", align=Align.INLINE)
subroutine(0xb2bc, "move_cursor_to_top_of_document")
subroutine(0xb2dd, "enter_editor_mode")
subroutine(0xb322, "create_default_ruler")
subroutine(0xb346, "reset_register_value_array")
comment(0xb360, "Default page length 66", align=Align.INLINE)
label(0xb350, "default_view_page_settings")
comment(0xb379, "default margin of 4", align=Align.INLINE)
label(0x38, "page_break_flag")
subroutine(0x951a,"print_vertical_space","Print a vertical space", "Prints a new line to create vertical space",{'x' : "Number of lines"},None,False,None, False)
subroutine(0x954f, "print_newline", "prints a newline", "Special instance of print_char", None, None, False, None, False)
comment(0x9542,"at position 0, no back fill with ' ' required", align=Align.INLINE)
subroutine(0x956c, "write_highlight_char_to_screen")
subroutine(0x9551, "print_char")
subroutine(0x956c, "write_highlight_char_to_screen")
subroutine(0xa80f, "check_for_highlight_one_or_two")
label(0x83, "offset")
label(0x84a7, "escaped_char_table")
for a in range(0, 8):
    string(0x84a7 + a * 2, 1)
    byte(0x84a7 + a * 2 + 1)
label(0x84a8, "escaped_char_table+1")
comment(0x84a7,"Escaped character table, two entries character and escaped code, terminating with &ff", align=Align.BEFORE_LINE)

subroutine(0x8526, "start_printing")
subroutine(0x8faf, "print_document")
subroutine(0x8f3a, "check_not_continuous_editing")
subroutine(0x85fd, "check_for_free_space", "Check for free Space", "Ensure there is at least 150 bytes free")
subroutine(0x8f45, "check_continuous_editing")
subroutine(0x8ada, "display_document_file_state")
subroutine(0x8e06, "get_byte_from_file", "get byte from file", "Gets the next byte from the file, where the file handle is in Y", {'y' : "File handle for open file"}, None, False, None)
comment(0x8e07, "Store stack pointer in temp variable", align=Align.INLINE)
comment(0x8e0e, "Restore stack pointer from temp variable", align=Align.INLINE)
comment(0x8e11, "Wipe temp variable",align=Align.INLINE)
subroutine(0x8e15,"read_first_chunk_from_input_fh")
subroutine(0x8e19, "read_next_chunk_from_input_fh")
subroutine(0x8e39, "write_area_to_output_fh")
subroutine(0x8e2a, "correct_ptr_end_of_document_maybe")
subroutine(0x8e8b, "compute_required_space_for_insertion")
subroutine(0x8e93, "store_free_space_in_tmp_eight_nine","store free space im tmp8/9", "Stores the free space in tempoary locations tmp8 and tmp9", None, {'a' : "Preserved", 'y' : "Preserved"}, False, None, False)
subroutine(0x8f10, "parse_filename_from_command")
subroutine(0x8ee5, "parse_optional_filename_from_command")
subroutine(0x8f16, "add_missing_cr_to_filename_buffer")
subroutine(0xb200, "perform_initalisation")
label(0xb25b, "mark_document_initalisation_flag")
label(0xb248, "mark_zp_initalisation_flag")
subroutine(0xb341, "add_end_of_ruler_marker")
subroutine(0x8f77, "check_for_bad_document")
subroutine(0x9319, "check_start_ruler")
subroutine(0x9322, "check_end_ruler")
subroutine(0x930c, "check_end_of_current_line_buffer")
subroutine(0x93c7, "start_new_page_maybe")
label(0x21, "text_length_on_page")
subroutine(0x90ec, "reduce_text_length_on_page_for_linespacing", "Reduce text length on page because of linespacing", "This function reduced the number of lines on a page because of the linespacing variable.",None,None, False, None, False)
comment(0xa7bd, "<tab>", align=Align.INLINE)
comment(0xa7c1, "<lf>", align=Align.INLINE)
comment(0xa7c5, "<cls/clg>", align=Align.INLINE)
subroutine(0xa860, "show_flags_on_screen")
comment(0xa8d5, "decimal_table+1", align=Align.INLINE)
comment(0xa8ef, "decimal_table+1", align=Align.INLINE)
subroutine(0x8f54, "error_if_cassette_filesystem")
subroutine(0xb1ee, "initaliase_document_if_document_bad")
subroutine(0xabc7, "adjust_pointers")
label(0xabac, "memory_full_message")
subroutine(0xaefc, "beep")
subroutine(0x9d3e, "editor_loop")
subroutine(0x9d3b, "run_editor")
subroutine(0xa970, "read_character", "reads a character", "Reads a character and can acknowledge escape - different than view 3.0", None, None, False, None, False)
label(0xaa55, "view_string_and_version")
subroutine(0xaaaa, "call_through_jumptable")
comment(0xaabb, "jumptable_ptr+1", align=Align.INLINE)
comment(0x80a7, "check for carrage return", align=Align.INLINE)
subroutine(0xac2c, "make_space_for_insertion")
subroutine(0xac49, "space_is_available")
subroutine(0xaca6, "unpack_line_into_buffer")
subroutine(0xad27, "wipe_buffer")
comment(0xb1af, "check rom workspace value", align=Align.INLINE)
subroutine(0xb1b5, "skip_setting_tube_flag")
subroutine(0x8468, "expand_escaped_string")
subroutine(0x8521, "disable_auto_paging")
subroutine(0x89ed, "set_document_name_to_filename_buffer")
subroutine(0x85d5, "close_input_output_files")
subroutine(0xade3, "move_cursor_to_address")
subroutine(0xaee9, "prompt_for_marker")
subroutine(0xaf03, "lookup_marker")
subroutine(0xaf11, "reset_area_to_entire_document")
subroutine(0xaf22, "clear_marks_1_and_2")
subroutine(0xaf2c, "reset_area_to_marks_1_and_2")
comment(0xaf4e, "doc_ptr1", align=Align.INLINE)
subroutine(0xaf5b, "set_marker_to_here")
subroutine(0xaf7d, "get_register_address")
subroutine(0xaf95, "render_register")
subroutine(0xafbb, "render_date_and_time_to_output_buffer")
subroutine(0xb157, "draw_previous_word")
subroutine(0xa7ba, "draw_char")
subroutine(0x8570, "close_all_files")


go()
